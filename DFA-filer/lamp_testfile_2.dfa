#! NX/KF 4.0
DefClass: A_Table_lamp_test_2 (%ug_create_instance ug_base_part);

    #Main origin coordinates
    (Number Parameter) x: 0;
    (Number Parameter) y: 0;
    (Number Parameter) z: 0;

    #Origin points and vectors
    (Point parameter) base_origin: Point(x: y: z:);
    (Vector parameter) base_vector: Vector(0,0,1);
    (Point parameter) leg_origin: base_origin: + base_vector: * base_height:;
    #DETTE PUNKTET MÃ… BYTTES SENERE
    (Point parameter) hood_origin: Point(x:, y:, z:);
    (Vector parameter) hood_vector: Vector(0,0,-1);

    #Base parameters
    (Number parameter) base_height: 10;
    (Number parameter) base_diameter: 30;

    #Hood parameters
    (Number parameter) hood_diameter: 50;
    (Number parameter) hood_thickness: 1; 
    (Point parameter) hood_center: hood_origin: + hood_vector: * (hood_diameter:/2);

    #Hood cutoff parameters
    (Number parameter) cutoff_part: 1/6; 
    (Number parameter) cutoff_height: getCutoffHeight:(cutoff_part:, hood_diameter:);
    (Number parameter) distance_from_center_to_cutoff: hood_diameter: / 2 - cutoff_height:;

    #Hood holder parameters
    (Number parameter) holder_length: cutoff_height:;
    (Number parameter) holder_diameter: 2;
    (Number parameter) crossbeam_length: getCutoffDiameter:(hood_diameter:, distance_from_center_to_cutoff:);
    (Number parameter) crossbeam_diameter: holder_diameter:;

    #Hood conjunction ball
    (Number parameter) ball_diameter: 4;
    (Point parameter) lower_ball_origin: hood_origin: + hood_vector: * (cutoff_height:+1);

    #Chain parameters
    (Number parameter) number_of_chains: 7;
    (Number parameter) chain_diameter: 0.5;
    (Number parameter) beads_per_chain: 5;
    (Number parameter) bead_diameter: 5;
    (Number parameter) space_between_beads: 2; 
    (Number parameter) chain_length: getChainLength:(beads_per_chain:, bead_diameter:, space_between_beads:);
    (Number parameter) angular_distribution: getAngularDistributionSpace:(number_of_chains:);

    #Important helper function!
    (Number parameter) cutoff_radius: getCutoffDiameter:(hood_diameter:, distance_from_center_to_cutoff:);

    (List) chain_origin_list: getChainOrigins:(distance_from_center_to_cutoff:, cutoff_radius:, number_of_chains:,
    hood_center:, hood_vector:, angular_distribution:); 

#+
***************************************METHODS**********************************************
#-

     (Method Number) getCutoffHeight:(Number $cutoff_part, Number $hood_diameter)
    @{
        $hood_diameter * $cutoff_part; 
    };

    (Method Number) getCutoffDiameter:(Number $diameter, Number $distance)
    @{
        sqrt(($diameter / 2)*($diameter / 2) - $distance*$distance);
    };

    (Method Number) getAngularDistributionSpace:(Number $number_of_chains)
    @{
         360 / ($number_of_chains); 
    };

    (Method Number) getChainLength:(Number $beads_per_chain, Number $diameter, Number $space)
    @{
         $beads_per_chain * $diameter + $beads_per_chain * $space; 
    };

    (Method List) getChainOrigins:(Number $distance_to_cutoff, Number $cutoff_radius, Number $number_of_chains, 
        Point $hood_center, Vector $hood_vector, Number $angular_distribution)
    @{
        #This loop simply adds vector to all the points we need. You CAN use Point + Vector = New Point!
         loop 
         {
             for $i from 0 to $number_of_chains-1;
             do printValue($angular_distribution*$i);
             append { 
                 $hood_center + $hood_vector * $distance_to_cutoff 
                 + Vector(1 * cos($angular_distribution * $i),
                 1 * sin($angular_distribution * $i),
                 0) * $cutoff_radius;
             };
         };
    };

#+
***************************************CHILDREN**********************************************
#-

(child) hood_sphere:
{
    class, ug_sphere;
    diameter, hood_diameter:;
    center, hood_center:;
};

(child) hood_hole:
{
    class, ug_sphere;
    diameter, hood_diameter: - (hood_thickness: * 2);
    center, hood_center:;
    operation, Subtract;
    Target, {hood_sphere:};
};

(child) hood_upper_cutoff:
{
    class, ug_cylinder;
    diameter, hood_diameter:;
    height, cutoff_height:;
    origin, hood_center: + Vector(0,0,1) * distance_from_center_to_cutoff:;
    direction, Vector(0,0,1);
    operation, Subtract;
    Target, {hood_sphere:};
};

(child) hood_lower_cutoff:
{
    class, ug_cylinder;
    diameter, hood_diameter:;
    height, cutoff_height:;
    origin, hood_center: + Vector(0,0,-1) * distance_from_center_to_cutoff:;
    direction, Vector(0,0,-1);
    operation, Subtract;
    Target, {hood_sphere:};
};

(child) hood_conjunction_ball:
{
    class, ug_sphere;
    diameter, ball_diameter:;
    center, hood_origin:;
};

(child) hood_upper_conjunction_ball:
{
    class, ug_sphere;
    diameter, ball_diameter:;
    center, hood_origin:;
};

(child) hood_lower_conjunction_ball:
{
    class, ug_sphere;
    diameter, ball_diameter:;
    center, lower_ball_origin:;
};

(child) hood_holder:
{
    class, ug_cylinder;
    diameter, holder_diameter:;
    height, holder_length:;
    Origin, hood_origin:;
    Direction, hood_vector:;
    Operation, Unite;
    Target, {hood_upper_conjunction_ball:, hood_lower_conjunction_ball:};
};

(child) crossbeam1:
{
    class, ug_cylinder;
    height, crossbeam_length:;
    diameter, crossbeam_diameter:;
    origin, lower_ball_origin:;
    direction, Vector(0,1,0);
    Operation, Unite;
    Target, {hood_sphere:};
};

(child) crossbeam2:
{
    class, ug_cylinder;
    height, crossbeam_length:;
    diameter, crossbeam_diameter:;
    origin, lower_ball_origin:;
    direction, Vector(0,-1,0);
    Operation, Unite;
    Target, {hood_sphere:};
};

(list) chains: loop
{
    for $origin in chain_origin_list:;
    collect loop{
        for $bead from 0 to beads_per_chain:;
        do printValue($origin);
        do printValue($bead);
        append { ug_createInstance(
        {
            class, ug_cylinder;
            diameter, chain_diameter:;
            height, space_between_beads:;
            Origin, $origin + (Vector(0,0,-1) * (space_between_beads: + bead_diameter:)) * $bead;
            Direction, Vector(0,0,-1);
        })};
        append{ug_createInstance(
        {
            class, ug_sphere;
            diameter, bead_diameter:;
            center, $origin + Vector(0,0,-1) * ( (space_between_beads: + bead_diameter: / 2) * ($bead + 1) + bead_diameter: / 2 * $bead);  
        })};
    };
};
(list) DemandValue: {chains:};